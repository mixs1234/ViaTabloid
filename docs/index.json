{
  "api/ViaTabloidApi.Controllers.StoriesController.html": {
    "href": "api/ViaTabloidApi.Controllers.StoriesController.html",
    "title": "Class StoriesController",
    "summary": "Class StoriesController Namespace ViaTabloidApi.Controllers Assembly ViaTabloidApi.dll [ApiController] [Route(\"api/[controller]\")] public class StoriesController : ControllerBase Inheritance object ControllerBase StoriesController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoriesController(IStoryService) public StoriesController(IStoryService storyService) Parameters storyService IStoryService Methods DeleteStory(int) [HttpDelete(\"{id}\")] public Task<IActionResult> DeleteStory(int id) Parameters id int Returns Task<IActionResult> GetStories() [HttpGet] public Task<ActionResult<IEnumerable<Story>>> GetStories() Returns Task<ActionResult<IEnumerable<Story>>> GetStory(int) [HttpGet(\"{id}\")] public Task<ActionResult<Story>> GetStory(int id) Parameters id int Returns Task<ActionResult<Story>> PostStory(CreateStoryDTO) [HttpPost] public Task<ActionResult<Story>> PostStory(CreateStoryDTO createStoryDTO) Parameters createStoryDTO CreateStoryDTO Returns Task<ActionResult<Story>> PutStory(int, Story) [HttpPut(\"{id}\")] public Task<IActionResult> PutStory(int id, Story story) Parameters id int story Story Returns Task<IActionResult>"
  },
  "api/ViaTabloidApi.Controllers.html": {
    "href": "api/ViaTabloidApi.Controllers.html",
    "title": "Namespace ViaTabloidApi.Controllers",
    "summary": "Namespace ViaTabloidApi.Controllers Classes StoriesController"
  },
  "api/ViaTabloidApi.Error.StoryNotFoundException.html": {
    "href": "api/ViaTabloidApi.Error.StoryNotFoundException.html",
    "title": "Class StoryNotFoundException",
    "summary": "Class StoryNotFoundException Namespace ViaTabloidApi.Error Assembly ViaTabloidApi.dll public class StoryNotFoundException : Exception, ISerializable Inheritance object Exception StoryNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StoryNotFoundException(string) public StoryNotFoundException(string message) Parameters message string"
  },
  "api/ViaTabloidApi.Error.html": {
    "href": "api/ViaTabloidApi.Error.html",
    "title": "Namespace ViaTabloidApi.Error",
    "summary": "Namespace ViaTabloidApi.Error Classes StoryNotFoundException"
  },
  "api/ViaTabloidApi.Infrastructure.Configuration.StoryConfiguration.html": {
    "href": "api/ViaTabloidApi.Infrastructure.Configuration.StoryConfiguration.html",
    "title": "Class StoryConfiguration",
    "summary": "Class StoryConfiguration Namespace ViaTabloidApi.Infrastructure.Configuration Assembly ViaTabloidApi.dll Configures the entity type Story for the database context. public class StoryConfiguration : IEntityTypeConfiguration<Story> Inheritance object StoryConfiguration Implements IEntityTypeConfiguration<Story> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<Story>) Configures the properties and relationships of the Story entity. public void Configure(EntityTypeBuilder<Story> builder) Parameters builder EntityTypeBuilder<Story> The builder used to configure the Story entity."
  },
  "api/ViaTabloidApi.Infrastructure.Configuration.html": {
    "href": "api/ViaTabloidApi.Infrastructure.Configuration.html",
    "title": "Namespace ViaTabloidApi.Infrastructure.Configuration",
    "summary": "Namespace ViaTabloidApi.Infrastructure.Configuration Classes StoryConfiguration Configures the entity type Story for the database context."
  },
  "api/ViaTabloidApi.Infrastructure.Context.html": {
    "href": "api/ViaTabloidApi.Infrastructure.Context.html",
    "title": "Class Context",
    "summary": "Class Context Namespace ViaTabloidApi.Infrastructure Assembly ViaTabloidApi.dll Represents the database context for the application, inheriting from DbContext. Provides access to the database sets and configuration for the entity models. public class Context : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext Context Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Context(DbContextOptions<Context>) Initializes a new instance of the Context class with the specified options. public Context(DbContextOptions<Context> options) Parameters options DbContextOptions<Context> The options to configure the database context. Properties Stories Gets or sets the DbSet<TEntity> for the Story entity. public DbSet<Story> Stories { get; set; } Property Value DbSet<Story> Methods OnModelCreating(ModelBuilder) Configures the entity models using the ModelBuilder. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder used to configure the entity models."
  },
  "api/ViaTabloidApi.Infrastructure.html": {
    "href": "api/ViaTabloidApi.Infrastructure.html",
    "title": "Namespace ViaTabloidApi.Infrastructure",
    "summary": "Namespace ViaTabloidApi.Infrastructure Classes Context Represents the database context for the application, inheriting from DbContext. Provides access to the database sets and configuration for the entity models."
  },
  "api/ViaTabloidApi.Middleware.ExceptionMiddleware.html": {
    "href": "api/ViaTabloidApi.Middleware.ExceptionMiddleware.html",
    "title": "Class ExceptionMiddleware",
    "summary": "Class ExceptionMiddleware Namespace ViaTabloidApi.Middleware Assembly ViaTabloidApi.dll public class ExceptionMiddleware Inheritance object ExceptionMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExceptionMiddleware(RequestDelegate, IWebHostEnvironment) public ExceptionMiddleware(RequestDelegate next, IWebHostEnvironment env) Parameters next RequestDelegate env IWebHostEnvironment Methods InvokeAsync(HttpContext, ILogger<ExceptionMiddleware>) public Task InvokeAsync(HttpContext context, ILogger<ExceptionMiddleware> logger) Parameters context HttpContext logger ILogger<ExceptionMiddleware> Returns Task"
  },
  "api/ViaTabloidApi.Middleware.html": {
    "href": "api/ViaTabloidApi.Middleware.html",
    "title": "Namespace ViaTabloidApi.Middleware",
    "summary": "Namespace ViaTabloidApi.Middleware Classes ExceptionMiddleware"
  },
  "api/ViaTabloidApi.Migrations.InitialCommit.html": {
    "href": "api/ViaTabloidApi.Migrations.InitialCommit.html",
    "title": "Class InitialCommit",
    "summary": "Class InitialCommit Namespace ViaTabloidApi.Migrations Assembly ViaTabloidApi.dll A base class inherited by each EF Core migration. [DbContext(typeof(Context))] [Migration(\"20250321112027_InitialCommit\")] public class InitialCommit : Migration Inheritance object Migration InitialCommit Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/ViaTabloidApi.Migrations.html": {
    "href": "api/ViaTabloidApi.Migrations.html",
    "title": "Namespace ViaTabloidApi.Migrations",
    "summary": "Namespace ViaTabloidApi.Migrations Classes InitialCommit A base class inherited by each EF Core migration."
  },
  "api/ViaTabloidApi.Models.DTO.CreateStoryDTO.html": {
    "href": "api/ViaTabloidApi.Models.DTO.CreateStoryDTO.html",
    "title": "Class CreateStoryDTO",
    "summary": "Class CreateStoryDTO Namespace ViaTabloidApi.Models.DTO Assembly ViaTabloidApi.dll public class CreateStoryDTO Inheritance object CreateStoryDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content public string Content { get; set; } Property Value string Department public string Department { get; set; } Property Value string Title public string Title { get; set; } Property Value string Methods MapToEntity() public Story MapToEntity() Returns Story"
  },
  "api/ViaTabloidApi.Models.DTO.html": {
    "href": "api/ViaTabloidApi.Models.DTO.html",
    "title": "Namespace ViaTabloidApi.Models.DTO",
    "summary": "Namespace ViaTabloidApi.Models.DTO Classes CreateStoryDTO"
  },
  "api/ViaTabloidApi.Resources.IStoryRepository.html": {
    "href": "api/ViaTabloidApi.Resources.IStoryRepository.html",
    "title": "Interface IStoryRepository",
    "summary": "Interface IStoryRepository Namespace ViaTabloidApi.Resources Assembly ViaTabloidApi.dll Represents a repository interface for managing stories. public interface IStoryRepository Methods AddAsync(Story) Adds a new story asynchronously. Task<Story> AddAsync(Story story) Parameters story Story The story to add. Returns Task<Story> A task that represents the asynchronous operation. Remarks The task result contains the story with its unique identifier populated. DeleteAsync(int) Deletes a story by its unique identifier asynchronously. Task DeleteAsync(int id) Parameters id int The unique identifier of the story to delete. Returns Task A task that represents the asynchronous operation. GetAllAsync() Retrieves all stories asynchronously. Task<IEnumerable<Story>> GetAllAsync() Returns Task<IEnumerable<Story>> A task that represents the asynchronous operation. The task result contains an enumerable collection of stories. GetByIdAsync(int) Retrieves a story by its unique identifier asynchronously. Task<Story> GetByIdAsync(int id) Parameters id int The unique identifier of the story. Returns Task<Story> A task that represents the asynchronous operation. The task result contains the story with the specified identifier. UpdateAsync(Story) Updates an existing story asynchronously. Task<Story> UpdateAsync(Story story) Parameters story Story The story to update. Returns Task<Story> A task that represents the asynchronous operation. Remarks The task result contains the updated story."
  },
  "api/ViaTabloidApi.Resources.StoryRepository.html": {
    "href": "api/ViaTabloidApi.Resources.StoryRepository.html",
    "title": "Class StoryRepository",
    "summary": "Class StoryRepository Namespace ViaTabloidApi.Resources Assembly ViaTabloidApi.dll public class StoryRepository : IStoryRepository Inheritance object StoryRepository Implements IStoryRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoryRepository(Context) public StoryRepository(Context context) Parameters context Context Methods AddAsync(Story) Adds a new story asynchronously. public Task<Story> AddAsync(Story story) Parameters story Story The story to add. Returns Task<Story> A task that represents the asynchronous operation. Remarks The task result contains the story with its unique identifier populated. DeleteAsync(int) Deletes a story by its unique identifier asynchronously. public Task DeleteAsync(int id) Parameters id int The unique identifier of the story to delete. Returns Task A task that represents the asynchronous operation. GetAllAsync() Retrieves all stories asynchronously. public Task<IEnumerable<Story>> GetAllAsync() Returns Task<IEnumerable<Story>> A task that represents the asynchronous operation. The task result contains an enumerable collection of stories. GetByIdAsync(int) Retrieves a story by its unique identifier asynchronously. public Task<Story> GetByIdAsync(int id) Parameters id int The unique identifier of the story. Returns Task<Story> A task that represents the asynchronous operation. The task result contains the story with the specified identifier. UpdateAsync(Story) Updates an existing story asynchronously. public Task<Story> UpdateAsync(Story story) Parameters story Story The story to update. Returns Task<Story> A task that represents the asynchronous operation. Remarks The task result contains the updated story."
  },
  "api/ViaTabloidApi.Resources.html": {
    "href": "api/ViaTabloidApi.Resources.html",
    "title": "Namespace ViaTabloidApi.Resources",
    "summary": "Namespace ViaTabloidApi.Resources Classes StoryRepository Interfaces IStoryRepository Represents a repository interface for managing stories."
  },
  "api/ViaTabloidApi.Services.IStoryService.html": {
    "href": "api/ViaTabloidApi.Services.IStoryService.html",
    "title": "Interface IStoryService",
    "summary": "Interface IStoryService Namespace ViaTabloidApi.Services Assembly ViaTabloidApi.dll Interface for managing stories in the application. public interface IStoryService Methods CreateStoryAsync(CreateStoryDTO) Creates a new story asynchronously. Task<Story> CreateStoryAsync(CreateStoryDTO createStoryDTO) Parameters createStoryDTO CreateStoryDTO Returns Task<Story> A task that represents the asynchronous operation. The task result contains the created story. DeleteStoryAsync(int) Deletes a story by its unique identifier asynchronously. Task DeleteStoryAsync(int id) Parameters id int The unique identifier of the story to be deleted. Returns Task A task that represents the asynchronous operation. GetAllStoriesAsync() Retrieves all stories asynchronously. Task<IEnumerable<Story>> GetAllStoriesAsync() Returns Task<IEnumerable<Story>> A task that represents the asynchronous operation. The task result contains a collection of stories. GetStoryByIdAsync(int) Retrieves a specific story by its unique identifier asynchronously. Task<Story> GetStoryByIdAsync(int id) Parameters id int The unique identifier of the story. Returns Task<Story> A task that represents the asynchronous operation. The task result contains the story with the specified ID. UpdateStoryAsync(Story) Updates an existing story asynchronously. Task UpdateStoryAsync(Story story) Parameters story Story The story with updated information. Returns Task A task that represents the asynchronous operation."
  },
  "api/ViaTabloidApi.Services.StoryService.html": {
    "href": "api/ViaTabloidApi.Services.StoryService.html",
    "title": "Class StoryService",
    "summary": "Class StoryService Namespace ViaTabloidApi.Services Assembly ViaTabloidApi.dll public class StoryService : IStoryService Inheritance object StoryService Implements IStoryService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoryService(IStoryRepository) public StoryService(IStoryRepository storyRepository) Parameters storyRepository IStoryRepository Methods CreateStoryAsync(CreateStoryDTO) Creates a new story asynchronously. public Task<Story> CreateStoryAsync(CreateStoryDTO createStoryDTO) Parameters createStoryDTO CreateStoryDTO Returns Task<Story> A task that represents the asynchronous operation. The task result contains the created story. DeleteStoryAsync(int) Deletes a story by its unique identifier asynchronously. public Task DeleteStoryAsync(int id) Parameters id int The unique identifier of the story to be deleted. Returns Task A task that represents the asynchronous operation. GetAllStoriesAsync() Retrieves all stories asynchronously. public Task<IEnumerable<Story>> GetAllStoriesAsync() Returns Task<IEnumerable<Story>> A task that represents the asynchronous operation. The task result contains a collection of stories. GetStoryByIdAsync(int) Retrieves a specific story by its unique identifier asynchronously. public Task<Story> GetStoryByIdAsync(int id) Parameters id int The unique identifier of the story. Returns Task<Story> A task that represents the asynchronous operation. The task result contains the story with the specified ID. UpdateStoryAsync(Story) Updates an existing story asynchronously. public Task UpdateStoryAsync(Story story) Parameters story Story The story with updated information. Returns Task A task that represents the asynchronous operation."
  },
  "api/ViaTabloidApi.Services.html": {
    "href": "api/ViaTabloidApi.Services.html",
    "title": "Namespace ViaTabloidApi.Services",
    "summary": "Namespace ViaTabloidApi.Services Classes StoryService Interfaces IStoryService Interface for managing stories in the application."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}